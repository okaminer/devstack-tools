#!/bin/bash

STACK_USER="stack"
STACK_PASS="stack"
GIT_DIR="/git"
STACK_DIR="${GIT_DIR}/devstack"
ADMIN_PASSWORD="secret"
SCRIPT_DIR=`dirname ${0}`


function usage {
  echo
  echo "Sets up a system to run devstack, configured to use ScaleIO for Cinder"
  echo "Requires an environment variable to be set to the name of the environment"
  echo "which must match the name of a file in the "
  echo "`dirname ${0}`/environments directory"
  echo
  echo "For example, to setup an environment called fubar:"
  echo " 1) Create a file in the environments directort called fubar with content"
  echo "    similar to the existing files"
  echo " 2) Invoke this script as:"
  echo "    sudo ENVIRONMENT=fubar ${0}"
  echo
  exit
}

function transformFile {
  SOURCE="${1}"
  TARGET="${2}"

  sed \
    -e "s|%ADMIN_PASSWORD%|${ADMIN_PASSWORD}|g" \
    -e "s|%PROTECTIONDOMAIN%|${PD}|g" \
    -e "s|%STORAGEPOOL%|${SP}|g" \
    -e "s|%GATEWAY%|${GATEWAY}|g" \
    "${SOURCE}" > "${TARGET}"
}




#
# deployment specific variables
#
echo "Setting up for environment: ${ENVIRONMENT}"
if [ -z "${ENVIRONMENT}" -o ! -f "${SCRIPT_DIR}/environments/${ENVIRONMENT}" ]; then
  echo "ERROR: ENVIRONMENT not found"
  echo

  usage
fi

# source the environment script
. "${SCRIPT_DIR}/environments/${ENVIRONMENT}"

#
# Setup the stack user, needs to be done as root
#
echo "Checking to see if user:${STACK_USER} exists"
cat /etc/passwd | grep '^stack:'
if [ $? -eq 1 ]; then
   echo "Creating user: ${STACK_USER}"
   CRYPTED_PASS=`echo ${STACK_PASS} | openssl passwd -crypt -stdin`
   useradd -d /home/${STACK_USER} -m ${STACK_USER} -p ${CRYPTED_PASS} -s /bin/bash
fi

echo "Checking to see if sudoers file for ${STACK_USER} exists"
if [ ! -f /etc/sudoers.d/${STACK_USER} ]; then
   echo "Creating sudoers file"
   echo "${STACK_USER} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/${STACK_USER}
fi

echo "Checking to see if the directory:${GIT_DIR} exists"
if [ ! -d "${GIT_DIR}" ]; then
   echo "Creating the base git directory"
   mkdir -p "${GIT_DIR}"
   chown -R ${STACK_USER} "${GIT_DIR}"
fi

# clone the repo
echo "Checking to see if the devstack repo exists"
if [ ! -d "${STACK_DIR}" ]; then
  echo "Cloning the devstack repo"
  git -c http.sslVerify=false clone https://git.openstack.org/openstack-dev/devstack "${STACK_DIR}"
fi

# create the local configuration files
for F in "local.conf"; do
  echo "Checking to see if the file:${F} file exists"
  if [ ! -f "${STACK_DIR}/${F}" ]; then
    echo "Creating ${F}"
    transformFile "${SCRIPT_DIR}/files/${F}" "${STACK_DIR}/${F}"
  fi
done

# we need to set http.sslVerify to false to pull code from behind the DellEMC firewall
su - ${STACK_USER} -c "git config --global http.sslVerify false"

# make sure it's all owned by the right user
chown -R ${STACK_USER} "${STACK_DIR}"

#
# Now setup the ScaleIO SDC
#
# check what operating system I am on
VARIANT=`lsb_release -si`
if [ $? -ne 0 ]; then
  VARIANT="CentOS"
  echo "lsb_release was not found, assuming ${VARIANT}"
fi

export MDM_IP="${MDM_IPS}"

if [ "${VARIANT}" == "Ubuntu" ]; then
  echo "Installing ScaleIO SDC..."
  # install the dependencies
  echo "Installing dependencies"
  apt-get install libaio1
  echo "installing SDC"
  cd "${SCRIPT_DIR}/scaleio"
  tar -xvf  EMC-ScaleIO-sdc-2.0-12000.122.Ubuntu.16.04.x86_64.tar
  ./siob_extract EMC-*.siob
  dpkg -i EMC-*.deb
  # copy in the scaleio scini update config file
  cp driver_sync.conf /bin/emc/scaleio/scini_sync
  # restart scini to laod the right kernel module
  echo "restarting the scini service"
  /etc/init.d/scini restart
elif [ "${VARIANT}" == "CentOS" ]; then
  echo "Installing ScaleIO SDC..."
  # install the dependencies
  echo "Installing dependencies"
  yum -y install libaio
  echo "installing SDC"
  rpm -U "${SCRIPT_DIR}/scaleio/EMC*.rpm"
else
  echo "Unknown linux variant"
  exit 1
fi


echo "You should now be able to 'su' to ${STACK_USER} and run ${STACK_DIR}/stack.sh"
