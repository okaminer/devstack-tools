#!/bin/bash
#
# Script to setup cinder as backend to glance

OPENSTACK_RELEASE=${OPENSTACK_RELEASE:-master}
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$( cd "$( dirname "${SCRIPT_DIR}" )" && pwd )"
IMAGE_EXT="$$"

DEVSTACK_DIR=${DEVSTACK_DIR:-/git/devstack}
if [ ! -d "${DEVSTACK_DIR}" ]; then
  echo "Unable to find the devstack directory"
  echo "Please export it as the DEVSTACK_DIR environment variable"
  exit 1
fi

# devstack contains some handy code to manipulate ini files
source "${DEVSTACK_DIR}/inc/ini-config"

CURRENT_IMAGES=`openstack image list -f csv --long --quote minimal`

# remove the existing images
while read line
do
  IMAGE=`echo "${line}" | awk -F',' '{print $1}'`
  NAME=`echo "${line}" | awk -F',' '{print $2}'`
  if [ "${IMAGE}" == "ID" ]; then
    continue
  fi
  echo "Downloading $IMAGE as $NAME.${IMAGE_EXT}"
  glance image-download --file "${NAME}.${IMAGE_EXT}" "${IMAGE}"
  echo "Deleting image: $IMAGE"
  openstack image delete $IMAGE
done < <(echo "${CURRENT_IMAGES}")

# setup cinder as backend to Glance
pip install python-cinderclient os-brick oslo.rootwrap
if [ ! -d "/etc/glance/rootwrap.d" ]; then
  sudo mkdir -p "/etc/glance/rootwrap.d"
fi
sudo cp "${PROJECT_DIR}/files/glance/${OPENSTACK_RELEASE}/glance_sudoers" "/etc/sudoers.d"
sudo cp "${PROJECT_DIR}/files/glance/${OPENSTACK_RELEASE}/glance_rootwrap.conf" "/etc/glance/rootwrap.conf"
sudo cp "${PROJECT_DIR}/files/glance/${OPENSTACK_RELEASE}/scaleio.glance.filters" "/etc/glance/rootwrap.d"

iniset "/etc/glance/glance-api.conf" "glance_store" "stores" "cinder"
iniset "/etc/glance/glance-api.conf" "glance_store" "default_store" "cinder"
iniset "/etc/glance/glance-api.conf" "DEFAULT" "show_image_direct_url" "True"
iniset "/etc/glance/glance-api.conf" "DEFAULT" "show_multiple_locations" "True"

echo "Restarting glance-api"
sudo systemctl restart devstack@g-api

# recreate the images
while read line
do
  IMAGE=`echo "${line}" | awk -F',' '{print $1}'`
  NAME=`echo "${line}" | awk -F',' '{print $2}'`
  if [ -f "${NAME}.${IMAGE_EXT}" ]; then
    echo "Uploading $NAME.image as $NAME"
    openstack image create --public \
                           --container-format bare \
                           --disk-format qcow2 \
                           --file "${NAME}.${IMAGE_EXT}" \
                           "${NAME}"
    rm "${NAME}.${IMAGE_EXT}"
  fi
done < <(echo "${CURRENT_IMAGES}")

TEMPEST_CONF="/opt/stack/tempest/etc/tempest.conf"
if [ -f "${TEMPEST_CONF}" ]; then
   # get the first cirros image and use it...
   TEMPEST_IMAGE=`openstack image list -f csv --long --quote minimal | grep cirros | head -n 1 | awk -F',' '{print$1}'`
   sudo sed -i -e "s|^image_ref_alt = .*|image_ref_alt = ${TEMPEST_IMAGE}|g" "${TEMPEST_CONF}"
   sudo sed -i -e "s|^image_ref = .*|image_ref = ${TEMPEST_IMAGE}|g" "${TEMPEST_CONF}"
fi

echo "All done. You should wait a while before using the images so that the data copying can complete"
