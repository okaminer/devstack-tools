#!/bin/bash
#
# Script to setup devstack with a config for ScaleIO behind cinder
#
# Ubuntu 16.04      Tested and working
# CentOS 7          Experimental support
#
# We need arguments to this script, it will be:
#    1) the public address of this node
#    2) The IP address of the node running the services

HOST_IP=""
if [ ! -z "${1}" ]; then
  HOST_IP="${1}"
else
  echo "Error: You must specify the IP address of this node as a parameter"
  echo "For example: ${0} 1.2.3.4"
  exit 1
fi

SERVICES_HOST=""
if [ ! -z "${2}" ]; then
  SERVICES_HOST="${2}"
else
  echo "Warning: no services node was specified on the command line"
  echo "Assuming this node should run all services"
  echo ""
  echo "If this is not correct, specify the ip address of the services node"
  echo "as the second paramater to this script"
  SERVICES_HOST="${HOST_IP}"
fi

STACK_USER="stack"
STACK_PASS="stack"
GIT_DIR="/git"
STACK_DIR="${GIT_DIR}/devstack"
ADMIN_PASSWORD="secret"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$( cd "$( dirname "${SCRIPT_DIR}" )" && pwd )"
SDCGUID=""
CERTDIR="${GIT_DIR}/gatewaycerts"

OPENSTACK_RELEASE=${OPENSTACK_RELEASE:-master}
# the cinder repo
CINDER_REPO=${CINDER_REPO:-http://git.openstack.org/openstack/cinder.git}
# cinder branch, if not specified, use the openstack version
CINDER_BRANCH=${CINDER_BRANCH:-$OPENSTACK_RELEASE}
# the nova repo
NOVA_REPO=${NOVA_REPO:-http://git.openstack.org/openstack/nova.git}
# nova branch, if not specified, use the openstack version
NOVA_BRANCH=${NOVA_BRANCH:-$OPENSTACK_RELEASE}
# scaleio username, if not specified, the default of 'admin'
SIO_USERNAME=${SIO_USERNAME:-admin}
# scaleio password, if not specified, the default of 'Scaleio123'
SIO_PASSWORD=${SIO_PASSWORD:-Scaleio123}
# GATEWAY PORT
CINDER_SIO_GATEWAYPORT=${CINDER_SIO_GATEWAYPORT:-443}
# verify certs or not, default is false
VERIFYCERTS=${VERIFYCERTS:-False}

function usage {
  echo
  echo "Sets up a system to run devstack, configured to use ScaleIO for Cinder"
  echo "Requires an environment variable to be set to the name of the environment"
  echo "which must match the name of a file in the "
  echo "${PROJECT_DIR}/environments directory"
  echo
  echo "For example, to setup an environment called 'fubar':"
  echo " 1) Create a file in the environments directory called 'fubar' with content"
  echo "    similar to the existing files"
  echo " 2) Invoke this script as:"
  echo "    sudo ENVIRONMENT=fubar ${0}"
  echo
  exit
}

function transformFile {
  SOURCE="${1}"
  TARGET="${2}"

  # calculate the number of computes nodes there should be
  # this is equal to the number of ip address in the
  # VM_IP environment variable PLUS one
  MIN_COMPUTE_NODES=`echo "${VM_IP}" | tr -cd ',' | wc -c`
  MIN_COMPUTE_NODES=$((MIN_COMPUTE_NODES + 1))

  if [ -z "${CINDER_SIO_POOLS}" ]; then
    CINDER_SIO_POOLS="${CINDER_SIO_PD}:${CINDER_SIO_SP}"
  fi

  sed \
    -e "s|%ADMIN_PASSWORD%|${ADMIN_PASSWORD}|g" \
    -e "s|%STORAGEPOOLS%|${CINDER_SIO_POOLS}|g" \
    -e "s|%PROTECTIONDOMAIN%|${CINDER_SIO_PD}|g" \
    -e "s|%STORAGEPOOL%|${CINDER_SIO_SP}|g" \
    -e "s|%GATEWAY%|${CINDER_SIO_GATEWAY}|g" \
    -e "s|%GATEWAYPORT%|${CINDER_SIO_GATEWAYPORT}|g" \
    -e "s|%CINDER_REPO%|${CINDER_REPO}|g" \
    -e "s|%CINDER_BRANCH%|${CINDER_BRANCH}|g" \
    -e "s|%NOVA_REPO%|${NOVA_REPO}|g" \
    -e "s|%NOVA_BRANCH%|${NOVA_BRANCH}|g" \
    -e "s|%SDCGUID%|${SDCGUID}|g" \
    -e "s|%SERVICES_HOST%|${SERVICES_HOST}|g" \
    -e "s|%HOST_IP%|${HOST_IP}|g" \
    -e "s|%SIO_USERNAME%|${SIO_USERNAME}|g" \
    -e "s|%SIO_PASSWORD%|${SIO_PASSWORD}|g" \
    -e "s|%MIN_COMPUTE_NODES%|${MIN_COMPUTE_NODES}|g" \
    -e "s|%VERIFYCERTS%|${VERIFYCERTS}|g" \
    "${SOURCE}" > "${TARGET}"
}

function get_gateway_cert {
  # this method retrieves the gateway cert and places it in $CERTDIR
  if [ ! -d "${CERTDIR}" ]; then
    mkdir -p "${CERTDIR}"
  fi

  openssl s_client -connect ${CINDER_SIO_GATEWAY}:${CINDER_SIO_GATEWAYPORT} -showcerts </dev/null 2>/dev/null | sed -n '/^-----BEGIN CERT/,/^-----END CERT/p' > "${CERTDIR}/gatewaycerts.pem"
}


# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

#
# deployment specific variables
#
echo "Setting up for environment: ${ENVIRONMENT}"
if [ -z "${ENVIRONMENT}" -o ! -f "${PROJECT_DIR}/environments/${ENVIRONMENT}" ]; then
  echo "WARNING: ENVIRONMENT not found, assuming everything is in environment variables"
  echo
else
  # source the environment script
  . "${PROJECT_DIR}/environments/${ENVIRONMENT}"
fi

#
# check what operating system I am on
VARIANT=""
if [ -f "/etc/centos-release" ]; then
  VARIANT="CentOS"
fi
if [ -f "/etc/lsb-release" ]; then
  VARIANT="Ubuntu"
  OS_VER="16.04"
fi
if [ -f "/etc/SuSE-release" ]; then
  VARIANT="SuSE"
fi
if [ -f "/etc/redhat-release" ]; then
  VARIANT="RedHat"
fi


VARIANT=`lsb_release -si`
UBUNTU_VERSION=""
if [ -z "${VARIANT}" ]; then
  VARIANT="CentOS"
  echo "lsb_release was not found, assuming ${VARIANT}"
elif [ "${VARIANT}" == "Ubuntu" ]; then
  UBUNTU_VERSION=`lsb_release -rs`
fi

echo "Running on ${VARIANT}"

if [ "${VARIANT}" != "Ubuntu" -a "${VARIANT}" != "CentOS" ];  then
  echo "Only CentOS and Ubuntu are Supported"
  exit 1
fi

echo "Installing dependencies"
if [ "${VARIANT}" == "Ubuntu" ]; then
  apt-get update
  apt-get install -y \
     build-essential \
     crudini \
     dialog \
     libpq-dev \
     openssh-server \
     python-pip \
     python-gdbm \
     python2.7-dev \
     python3-dev \
     screen \
     wget \
     virtualenv
elif [ "${VARIANT}" == "CentOS" ]; then
  # add the repo that contains python3.5 (needed for tox tests)
  yum install -y https://centos7.iuscommunity.org/ius-release.rpm
  yum install -y \
     crudini \
     dialog \
     python35u-devel \
     python-pip \
     screen \
     wget \
     yum-utils
fi

#
# Setup the stack user, needs to be done as root
#
echo "Checking to see if user:${STACK_USER} exists"
cat /etc/passwd | grep '^stack:'
if [ $? -eq 1 ]; then
   echo "Creating user: ${STACK_USER}"
   CRYPTED_PASS=`echo ${STACK_PASS} | openssl passwd -crypt -stdin`
   useradd -d /home/${STACK_USER} -m ${STACK_USER} -p ${CRYPTED_PASS} -s /bin/bash
fi

echo "Checking to see if sudoers file for ${STACK_USER} exists"
if [ ! -f /etc/sudoers.d/${STACK_USER} ]; then
   echo "Creating sudoers file"
   echo "${STACK_USER} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/${STACK_USER}
fi

echo "Setting up the ssh keys for root"
if [ ! -d /root/.ssh ]; then
   mkdir -p /root/.ssh
fi
if [ ! -f /root/.ssh/id_rsa ]; then
   cp "${PROJECT_DIR}"/ssh/* /root/.ssh
fi
chmod -R 700 /root/.ssh

echo "setting up ssh for the ${STACK_USER} user"
if [ ! -d "/home/${STACK_USER}/.ssh" ]; then
   mkdir -p "/home/${STACK_USER}/.ssh"
fi
if [ ! -f "/home/${STACK_USER}/.ssh/id_rsa" ]; then
   cp /root/.ssh/* "/home/${STACK_USER}/.ssh"
fi
chown -R "${STACK_USER}:${STACK_USER}" "/home/${STACK_USER}/.ssh"
chmod -R 700 "/home/${STACK_USER}/.ssh"

echo "Checking to see if the directory:${GIT_DIR} exists"
if [ ! -d "${GIT_DIR}" ]; then
   echo "Creating the base git directory"
   mkdir -p "${GIT_DIR}"
fi

chown -R ${STACK_USER} "${GIT_DIR}"

# we need to set http.sslVerify to false to pull code from behind the DellEMC firewall
su - ${STACK_USER} -c "git config --global http.sslVerify false"

# clone the repo
echo "Checking to see if the devstack repo exists"
if [ ! -d "${STACK_DIR}" ]; then
  echo "Cloning the devstack repo"
  sudo -H -u "${STACK_USER}" git -c http.sslVerify=false clone http://git.openstack.org/openstack-dev/devstack -b "${OPENSTACK_RELEASE}" "${STACK_DIR}"
fi

# make sure it's all owned by the right user
chown -R ${STACK_USER} "${STACK_DIR}"

# disable all ipv6 if running on Ubuntu or CentOS
if [ "${VARIANT}" == "Ubuntu" ]; then
  echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
  echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
  echo "net.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.conf
  sysctl -p
elif [ "${VARIANT}" == "CentOS" ]; then
  echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
  echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
  sysctl -p
fi

#
# Now setup the ScaleIO SDC
if [ ! -z "${SDC_LOCATION}" ]; then
  # determine which version of ScaleIO we are talking to
  SIOVERSION=`curl -k -m 5 https://${CINDER_SIO_GATEWAY}:${CINDER_SIO_GATEWAYPORT}/api/version 2>/dev/null`
  # by default, install the oldest version
  RPMVERSION="2.0"
  case "${SIOVERSION}" in
    *2.0*) RPMVERSION="2.0";;
    *2.5*) RPMVERSION="2.5";;
    *3.0*) RPMVERSION="3.0";;
  esac

  echo "Installing SDC for ScaleIO ${SIOVERSION} (${RPMVERSION})..."

  cd "/tmp"

  export MDM_IP="${CINDER_SIO_MDM_IPS}"

  if [ "${VARIANT}" == "Ubuntu" ]; then
    # fetch the bits
    wget -r -nd --no-parent -A '*sdc*.tar' "${SDC_LOCATION}"
    echo "Installing ScaleIO SDC.. for Ubuntu ${OS_VER}"
    # install the dependencies
    echo "Installing dependencies"
    apt-get install -y libaio1
    echo "installing SDC"
    tar -xvf EMC-ScaleIO-sdc-${RPMVERSION}*${OS_VER}.x86_64.tar
    ./siob_extract EMC-*.siob
    dpkg -i EMC-*.deb
    # copy in the scaleio scini update config file
    cp "${PROJECT_DIR}/scaleio/driver_sync.conf" /bin/emc/scaleio/scini_sync
    # restart scini to laod the right kernel module
    echo "restarting the scini service"
    /etc/init.d/scini restart
  elif [ "${VARIANT}" == "CentOS" -o "${VARIANT}" == "RedHat" ]; then
    # fetch the bits
    wget -r -nd --no-parent -A '*sdc*.rpm' "${SDC_LOCATION}"
    echo "Installing ScaleIO SDC..."
    # install the dependencies
    echo "Installing dependencies"
    yum install -y libaio
    echo "installing SDC"
    yum localinstall -y EMC-ScaleIO-sdc-${RPMVERSION}*el7.x86_64.rpm
  fi
fi


SDCGUID=`/bin/emc/scaleio/drv_cfg --query_guid`

get_gateway_cert

# create the local configuration files
if [ "${SERVICES_HOST}" == "${HOST_IP}" ]; then
  F="local.conf"
else
  F="compute.conf"
fi

echo "Checking to see if the local.conf file exists"
if [ ! -f "${STACK_DIR}/local.conf" ]; then
  echo "Creating local.conf"
  transformFile "${PROJECT_DIR}/files/${OPENSTACK_RELEASE}/${F}" "${STACK_DIR}/local.conf"
fi

chown -R ${STACK_USER} "${GIT_DIR}"

if [ "${EPHEMERAL}" == "True" ]; then
  ${PROJECT_DIR}/bin/setup-ephemeral "${OPENSTACK_RELEASE}"
fi

cat "${PROJECT_DIR}/files/bash_profile" >> /home/${STACK_USER}/.bash_profile
chown ${STACK_USER}:${STACK_USER} /home/${STACK_USER}/.bash_profile
chmod +x /home/${STACK_USER}/.bash_profile

echo "You should now be able to 'su' to ${STACK_USER} and run ${STACK_DIR}/stack.sh"
