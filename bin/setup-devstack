#!/bin/bash
#
# Script to setup devstack with a config for ScaleIO behind cinder
#
# Ubuntu 16.04      Tested and working
# CentOS 7          Experimental support
#
# We need arguments to this script, it will be:
#    1) the public address of this node
#    2) The IP address of the node running the services

HOST_IP=""
if [ ! -z "${1}" ]; then
  HOST_IP="${1}"
fi

SERVICES_HOST=""
if [ ! -z "${2}" ]; then
  SERVICES_HOST="${2}"
fi

STACK_USER="stack"
STACK_PASS="stack"
GIT_DIR="/git"
STACK_DIR="${GIT_DIR}/devstack"
ADMIN_PASSWORD="secret"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$( cd "$( dirname "${SCRIPT_DIR}" )" && pwd )"
SDCGUID=""

OPENSTACK_RELEASE=${OPENSTACK_RELEASE:-master}
# the cinder repo
CINDER_REPO=${CINDER_REPO:-http://git.openstack.org/openstack/cinder.git}
# cinder branch, if not specified, use the openstack version
CINDER_BRANCH=${CINDER_BRANCH:-$OPENSTACK_RELEASE}
# the nova repo
NOVA_REPO=${NOVA_REPO:-http://git.openstack.org/openstack/nova.git}
# nova branch, if not specified, use the openstack version
NOVA_BRANCH=${NOVA_BRANCH:-$OPENSTACK_RELEASE}

function usage {
  echo
  echo "Sets up a system to run devstack, configured to use ScaleIO for Cinder"
  echo "Requires an environment variable to be set to the name of the environment"
  echo "which must match the name of a file in the "
  echo "${PROJECT_DIR}/environments directory"
  echo
  echo "For example, to setup an environment called 'fubar':"
  echo " 1) Create a file in the environments directory called 'fubar' with content"
  echo "    similar to the existing files"
  echo " 2) Invoke this script as:"
  echo "    sudo ENVIRONMENT=fubar ${0}"
  echo
  exit
}

function transformFile {
  SOURCE="${1}"
  TARGET="${2}"

  sed \
    -e "s|%ADMIN_PASSWORD%|${ADMIN_PASSWORD}|g" \
    -e "s|%PROTECTIONDOMAIN%|${CINDER_SIO_PD}|g" \
    -e "s|%STORAGEPOOL%|${CINDER_SIO_SP}|g" \
    -e "s|%GATEWAY%|${CINDER_SIO_GATEWAY}|g" \
    -e "s|%CINDER_REPO%|${CINDER_REPO}|g" \
    -e "s|%CINDER_BRANCH%|${CINDER_BRANCH}|g" \
    -e "s|%NOVA_REPO%|${NOVA_REPO}|g" \
    -e "s|%NOVA_BRANCH%|${NOVA_BRANCH}|g" \
    -e "s|%SDCGUID%|${SDCGUID}|g" \
    -e "s|%SERVICES_HOST%|${SERVICES_HOST}|g" \
    -e "s|%HOST_IP%|${HOST_IP}|g" \
    "${SOURCE}" > "${TARGET}"
}


# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

#
# deployment specific variables
#
echo "Setting up for environment: ${ENVIRONMENT}"
if [ -z "${ENVIRONMENT}" -o ! -f "${PROJECT_DIR}/environments/${ENVIRONMENT}" ]; then
  echo "WARNING: ENVIRONMENT not found, assuming everything is in environment variables"
  echo
else
  # source the environment script
  . "${PROJECT_DIR}/environments/${ENVIRONMENT}"
fi

#
# Setup the stack user, needs to be done as root
#
echo "Checking to see if user:${STACK_USER} exists"
cat /etc/passwd | grep '^stack:'
if [ $? -eq 1 ]; then
   echo "Creating user: ${STACK_USER}"
   CRYPTED_PASS=`echo ${STACK_PASS} | openssl passwd -crypt -stdin`
   useradd -d /home/${STACK_USER} -m ${STACK_USER} -p ${CRYPTED_PASS} -s /bin/bash
fi

echo "Checking to see if sudoers file for ${STACK_USER} exists"
if [ ! -f /etc/sudoers.d/${STACK_USER} ]; then
   echo "Creating sudoers file"
   echo "${STACK_USER} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/${STACK_USER}
fi

echo "Setting up the ssh keys for root"
if [ ! -d /root/.ssh ]; then
   mkdir -p /root/.ssh
fi
cp "${PROJECT_DIR}"/ssh/* /root/.ssh
chmod -R 700 /root/.ssh
echo "setting up ssh for the ${STACK_USER} user"
if [ ! -d "/home/${STACK_USER}/.ssh" ]; then
   mkdir -p "/home/${STACK_USER}/.ssh"
fi
cp "${PROJECT_DIR}"/ssh/* "/home/${STACK_USER}/.ssh"
chown -R "${STACK_USER}:${STACK_USER}" "/home/${STACK_USER}/.ssh"
chmod -R 700 "/home/${STACK_USER}/.ssh"

echo "Checking to see if the directory:${GIT_DIR} exists"
if [ ! -d "${GIT_DIR}" ]; then
   echo "Creating the base git directory"
   mkdir -p "${GIT_DIR}"
fi

chown -R ${STACK_USER} "${GIT_DIR}"

# we need to set http.sslVerify to false to pull code from behind the DellEMC firewall
su - ${STACK_USER} -c "git config --global http.sslVerify false"

# clone the repo
echo "Checking to see if the devstack repo exists"
if [ ! -d "${STACK_DIR}" ]; then
  echo "Cloning the devstack repo"
  sudo -H -u "${STACK_USER}" git -c http.sslVerify=false clone http://git.openstack.org/openstack-dev/devstack -b "${OPENSTACK_RELEASE}" "${STACK_DIR}"
fi

# make sure it's all owned by the right user
chown -R ${STACK_USER} "${STACK_DIR}"

#
# Now setup the ScaleIO SDC
#
# check what operating system I am on
VARIANT=`lsb_release -si`
UBUNTU_VERSION=""
if [ $? -ne 0 ]; then
  VARIANT="CentOS"
  echo "lsb_release was not found, assuming ${VARIANT}"
fi

if [ "${VARIANT}" == "Ubuntu" ]; then
  echo "Installing dependencies"
  apt-get install -y \
     build-essential \
     libpq-dev \
     openssh-server \
     python2.7-dev \
     python3-dev \
     virtualenv
elif [ "${VARIANT}" == "CentOS" ]; then
  echo "Running on CentOS, unsupported"
  exit 1
else
  echo "Unknown linux variant: ${VARIANT}, unsupported"
  exit 1
fi

export MDM_IP="${CINDER_SIO_MDM_IPS}"

if [ "${VARIANT}" == "Ubuntu" ]; then
  UBUNTU_VERSION=`lsb_release -rs`
  echo "Installing ScaleIO SDC.. for Ubuntu ${UBUNTU_VERSION}"
  # install the dependencies
  echo "Installing dependencies"
  apt-get install libaio1
  echo "installing SDC"
  cd "${PROJECT_DIR}/scaleio"
  tar -xvf  EMC-ScaleIO-sdc-2.0-12000.122.Ubuntu.${UBUNTU_VERSION}.x86_64.tar
  ./siob_extract EMC-*.siob
  dpkg -i EMC-*.deb
  # copy in the scaleio scini update config file
  cp "${PROJECT_DIR}/scaleio/driver_sync.conf" /bin/emc/scaleio/scini_sync
  # restart scini to laod the right kernel module
  echo "restarting the scini service"
  /etc/init.d/scini restart
elif [ "${VARIANT}" == "CentOS" ]; then
  echo "Installing ScaleIO SDC..."
  # install the dependencies
  echo "Installing dependencies"
  yum -y install libaio
  echo "installing SDC"
  rpm -U "${PROJECT_DIR}/scaleio/EMC*.rpm"
else
  echo "Unknown linux variant"
  exit 1
fi

SDCGUID=`/bin/emc/scaleio/drv_cfg --query_guid`

# create the local configuration files
if [ -z "${SERVICES_HOST}"]; then
  F="local.conf"
else
  F="compute.conf"
fi

echo "Checking to see if the local.conf file exists"
if [ ! -f "${STACK_DIR}/local.conf" ]; then
  echo "Creating local.conf"
  transformFile "${PROJECT_DIR}/files/${OPENSTACK_RELEASE}/${F}" "${STACK_DIR}/local.conf"
fi

chown -R ${STACK_USER} "${GIT_DIR}"

if [ "${EPHEMERAL}" == "True" ]; then
  # setup the system for ephemeral device testing
  git clone "${NOVA_REPO}" -b "${NOVA_BRANCH}" /git/nova-temp
  cd /git/nova-temp
  pip install -r requirements.txt
  cd /git
  rm -rf nova-temp

  cd /git && git clone https://github.com/codedellemc/python-scaleioclient -b newton
  pip install python-scaleioclient/

  sed -i -e "s|## images_type=sio|images_type=sio|g" /git/devstack/local.conf
  sed -i -e "s|## flavor_ref = .*|flavor_ref = 100|g" /git/devstack/local.conf
  sed -i -e "s|## flavor_ref_alt = .*|flavor_ref_alt = 101|g" /git/devstack/local.conf

fi

echo "You should now be able to 'su' to ${STACK_USER} and run ${STACK_DIR}/stack.sh"
